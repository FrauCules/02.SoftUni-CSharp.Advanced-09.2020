using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using NUnit.Framework;

public class Test_000_01
{
    // MUST exist within project, otherwise a Compile Time Error will be thrown.
    private static readonly Assembly ProjectAssembly = Assembly.Load("CustomDoublyLinkedList");

    [Test]
    public void Test()
    {
        var objectType = GetGenericType("DoublyLinkedList", typeof(string));
        var objectVal = CreateObjectInstance(objectType);
        
        Assert.NotNull(objectVal);
    }

    private static object GetPropertyValue(object obj, string propName)
    {
        try
        {
            var result = obj.GetType()
                .GetProperty(propName)
                .GetValue(obj);

            return result;
        }
        catch (TargetInvocationException e)
        {
            return e.InnerException.Message;
        }
    }

    private static object InvokeMethod(object obj, string methodName, params object[] parameters)
    {
        try
        {
            var result = obj.GetType()
                .GetMethod(methodName)
                .Invoke(obj, parameters);

            return result;
        }
        catch (TargetInvocationException e)
        {
            throw e.InnerException;
        }
    }

    private static object CreateObjectInstance(Type type, params object[] parameters)
    {
        try
        {
            return Activator.CreateInstance(type, parameters);
        }
        catch (TargetInvocationException e)
        {
            return e.InnerException.Message;
        }
    }

    private static object CreateObjectInstanceWithInterfaces(Type type, params object[] parameters)
    {
        try
        {
            var desiredConstructor = type.GetConstructors()
                .FirstOrDefault(x => x.GetParameters().Any());

            if (desiredConstructor == null)
            {
                return Activator.CreateInstance(type, parameters);
            }

            var instances = new List<object>();

            foreach (var parameterInfo in desiredConstructor.GetParameters())
            {
                var currentInstance = Activator.CreateInstance(GetGenericType(parameterInfo.Name.Substring(1), parameterInfo.ParameterType));

                instances.Add(currentInstance);
            }

            return Activator.CreateInstance(type, instances.ToArray());
        }
        catch (TargetInvocationException e)
        {
            return e.InnerException.Message;
        }
    }

    private static Type GetGenericType(string name, Type genericType)
    {
        var type = ProjectAssembly
                .GetTypes()
                .Where(x => x.IsGenericType)
                .Where(x => !x.IsInterface)
                .FirstOrDefault(t => t.Name.Contains(name, StringComparison.OrdinalIgnoreCase))
                .MakeGenericType(genericType);

        return type;
    }

    private static Type GetType(string name)
    {
        var type = ProjectAssembly
            .GetTypes()
            .Where(x => !x.IsInterface)
            .FirstOrDefault(t => t.Name.Contains(name, StringComparison.OrdinalIgnoreCase));

        return type;
    }
}